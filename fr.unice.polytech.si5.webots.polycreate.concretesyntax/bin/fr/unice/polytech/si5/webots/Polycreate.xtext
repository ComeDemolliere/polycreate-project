// automatically generated by Xtext
grammar fr.unice.polytech.si5.webots.Polycreate with org.eclipse.xtext.common.Terminals

import "http://fr.polytech.unice/polycreate" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RobotProgram returns RobotProgram:
	{RobotProgram}
	'RobotProgram'
	name=EString
		'->' initialState=State
		(ownedStates+=State)*
		(globalTransitions+=Transition)*	
	;

EString returns ecore::EString:
	STRING | ID;

Condition returns Condition:
	SimpleCondition | ObjectCondition;

Action returns Action:
	MoveAction | TurnAction | GripAction;

Transition returns Transition:
	{Transition}
	(conditions+=Condition ('and' conditions+=Condition)* '=>')? nextState=[State|EString]
	;

State returns State:
	{State}
	'State' name=EString
	':'
		('actions' '=' '[' actions+=Action ( ',' actions+=Action)* ']' )?
		('transitions' '=' '[' transitions+=Transition ( "," transitions+=Transition)* ']' )?
	;

SimpleCondition returns SimpleCondition:
	{SimpleCondition}
	'detect' detectionType=DETECTION;
	
ObjectCondition returns ObjectCondition:
	DistanceCondition | AngleCondition
;

DistanceCondition returns DistanceCondition:
	{DistanceCondition}
	'detect' 'object' cameraType=CAMERATYPE 'with' 'distance' operator=OPERATOR distance=EDouble;
	
AngleCondition returns AngleCondition:
	{AngleCondition}
	'detect' 'object' cameraType=CAMERATYPE 'with' 'angle' operator=OPERATOR angle=EDouble;

enum DETECTION returns DETECTION:
				COLLISION_LEFT = 'COLLISION_LEFT' | COLLISION_RIGHT = 'COLLISION_RIGHT' | VIRTUAL_WALL = 'VIRTUAL_WALL' | CLIFF_LEFT = 'CLIFF_LEFT' | CLIFF_RIGHT = 'CLIFF_RIGHT' | CLIFF_FRONT = 'CLIFF_FRONT';

MoveAction returns MoveAction:
	{MoveAction}
	'move' direction=DIRECTION ('during' duration=EDouble)?;

TurnAction returns TurnAction:
	{TurnAction}
	'turn' angle=EDouble ('during' duration=EDouble)?;
	
GripAction returns GripAction:
	{GripAction}
	state=GRIPPER_STATE 'gripper';
	
enum OPERATOR returns OPERATOR:
				INFERIOR = '<' | SUPERIOR = '>';

enum DIRECTION returns DIRECTION:
				FORWARD = 'FORWARD' | BACKWARD = 'BACKWARD';
				
enum CAMERATYPE returns CAMERATYPE:
				BACK = 'BACK' | FRONT = 'FRONT';
				
enum GRIPPER_STATE returns GRIPPER_STATE:
				OPEN = 'Open' | CLOSED = 'Closed';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
