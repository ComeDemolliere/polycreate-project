/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.si5.webots.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.unice.polytech.si5.webots.ide.contentassist.antlr.internal.InternalPolycreateParser;
import fr.unice.polytech.si5.webots.services.PolycreateGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class PolycreateParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PolycreateGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PolycreateGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
			builder.put(grammarAccess.getObjectConditionAccess().getAlternatives(), "rule__ObjectCondition__Alternatives");
			builder.put(grammarAccess.getEDoubleAccess().getAlternatives_4_0(), "rule__EDouble__Alternatives_4_0");
			builder.put(grammarAccess.getDETECTIONAccess().getAlternatives(), "rule__DETECTION__Alternatives");
			builder.put(grammarAccess.getOPERATORAccess().getAlternatives(), "rule__OPERATOR__Alternatives");
			builder.put(grammarAccess.getDIRECTIONAccess().getAlternatives(), "rule__DIRECTION__Alternatives");
			builder.put(grammarAccess.getCAMERATYPEAccess().getAlternatives(), "rule__CAMERATYPE__Alternatives");
			builder.put(grammarAccess.getGRIPPER_STATEAccess().getAlternatives(), "rule__GRIPPER_STATE__Alternatives");
			builder.put(grammarAccess.getRobotProgramAccess().getGroup(), "rule__RobotProgram__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_1(), "rule__Transition__Group_1__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_1_1(), "rule__Transition__Group_1_1__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup_4(), "rule__State__Group_4__0");
			builder.put(grammarAccess.getStateAccess().getGroup_4_4(), "rule__State__Group_4_4__0");
			builder.put(grammarAccess.getStateAccess().getGroup_5(), "rule__State__Group_5__0");
			builder.put(grammarAccess.getStateAccess().getGroup_5_4(), "rule__State__Group_5_4__0");
			builder.put(grammarAccess.getSimpleConditionAccess().getGroup(), "rule__SimpleCondition__Group__0");
			builder.put(grammarAccess.getDistanceConditionAccess().getGroup(), "rule__DistanceCondition__Group__0");
			builder.put(grammarAccess.getAngleConditionAccess().getGroup(), "rule__AngleCondition__Group__0");
			builder.put(grammarAccess.getMoveActionAccess().getGroup(), "rule__MoveAction__Group__0");
			builder.put(grammarAccess.getMoveActionAccess().getGroup_3(), "rule__MoveAction__Group_3__0");
			builder.put(grammarAccess.getTurnActionAccess().getGroup(), "rule__TurnAction__Group__0");
			builder.put(grammarAccess.getTurnActionAccess().getGroup_3(), "rule__TurnAction__Group_3__0");
			builder.put(grammarAccess.getGripActionAccess().getGroup(), "rule__GripAction__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
			builder.put(grammarAccess.getEDoubleAccess().getGroup_4(), "rule__EDouble__Group_4__0");
			builder.put(grammarAccess.getRobotProgramAccess().getNameAssignment_2(), "rule__RobotProgram__NameAssignment_2");
			builder.put(grammarAccess.getRobotProgramAccess().getInitialStateAssignment_4(), "rule__RobotProgram__InitialStateAssignment_4");
			builder.put(grammarAccess.getRobotProgramAccess().getOwnedStatesAssignment_5(), "rule__RobotProgram__OwnedStatesAssignment_5");
			builder.put(grammarAccess.getRobotProgramAccess().getGlobalTransitionsAssignment_6(), "rule__RobotProgram__GlobalTransitionsAssignment_6");
			builder.put(grammarAccess.getTransitionAccess().getConditionsAssignment_1_0(), "rule__Transition__ConditionsAssignment_1_0");
			builder.put(grammarAccess.getTransitionAccess().getConditionsAssignment_1_1_1(), "rule__Transition__ConditionsAssignment_1_1_1");
			builder.put(grammarAccess.getTransitionAccess().getNextStateAssignment_2(), "rule__Transition__NextStateAssignment_2");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_2(), "rule__State__NameAssignment_2");
			builder.put(grammarAccess.getStateAccess().getActionsAssignment_4_3(), "rule__State__ActionsAssignment_4_3");
			builder.put(grammarAccess.getStateAccess().getActionsAssignment_4_4_1(), "rule__State__ActionsAssignment_4_4_1");
			builder.put(grammarAccess.getStateAccess().getTransitionsAssignment_5_3(), "rule__State__TransitionsAssignment_5_3");
			builder.put(grammarAccess.getStateAccess().getTransitionsAssignment_5_4_1(), "rule__State__TransitionsAssignment_5_4_1");
			builder.put(grammarAccess.getSimpleConditionAccess().getDetectionTypeAssignment_2(), "rule__SimpleCondition__DetectionTypeAssignment_2");
			builder.put(grammarAccess.getDistanceConditionAccess().getCameraTypeAssignment_3(), "rule__DistanceCondition__CameraTypeAssignment_3");
			builder.put(grammarAccess.getDistanceConditionAccess().getOperatorAssignment_6(), "rule__DistanceCondition__OperatorAssignment_6");
			builder.put(grammarAccess.getDistanceConditionAccess().getDistanceAssignment_7(), "rule__DistanceCondition__DistanceAssignment_7");
			builder.put(grammarAccess.getAngleConditionAccess().getCameraTypeAssignment_3(), "rule__AngleCondition__CameraTypeAssignment_3");
			builder.put(grammarAccess.getAngleConditionAccess().getOperatorAssignment_6(), "rule__AngleCondition__OperatorAssignment_6");
			builder.put(grammarAccess.getAngleConditionAccess().getAngleAssignment_7(), "rule__AngleCondition__AngleAssignment_7");
			builder.put(grammarAccess.getMoveActionAccess().getDirectionAssignment_2(), "rule__MoveAction__DirectionAssignment_2");
			builder.put(grammarAccess.getMoveActionAccess().getDurationAssignment_3_1(), "rule__MoveAction__DurationAssignment_3_1");
			builder.put(grammarAccess.getTurnActionAccess().getAngleAssignment_2(), "rule__TurnAction__AngleAssignment_2");
			builder.put(grammarAccess.getTurnActionAccess().getDurationAssignment_3_1(), "rule__TurnAction__DurationAssignment_3_1");
			builder.put(grammarAccess.getGripActionAccess().getStateAssignment_1(), "rule__GripAction__StateAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PolycreateGrammarAccess grammarAccess;

	@Override
	protected InternalPolycreateParser createParser() {
		InternalPolycreateParser result = new InternalPolycreateParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PolycreateGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PolycreateGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
