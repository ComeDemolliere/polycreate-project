/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.si5.webots.serializer;

import com.google.inject.Inject;
import fr.unice.polytech.si5.webots.polycreate.abstractsyntax.polycreate.MoveAction;
import fr.unice.polytech.si5.webots.polycreate.abstractsyntax.polycreate.PolycreatePackage;
import fr.unice.polytech.si5.webots.polycreate.abstractsyntax.polycreate.RobotProgram;
import fr.unice.polytech.si5.webots.polycreate.abstractsyntax.polycreate.SimpleCondition;
import fr.unice.polytech.si5.webots.polycreate.abstractsyntax.polycreate.State;
import fr.unice.polytech.si5.webots.polycreate.abstractsyntax.polycreate.Transition;
import fr.unice.polytech.si5.webots.polycreate.abstractsyntax.polycreate.TurnAction;
import fr.unice.polytech.si5.webots.services.PolycreateGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class PolycreateSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PolycreateGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PolycreatePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PolycreatePackage.MOVE_ACTION:
				sequence_MoveAction(context, (MoveAction) semanticObject); 
				return; 
			case PolycreatePackage.ROBOT_PROGRAM:
				sequence_RobotProgram(context, (RobotProgram) semanticObject); 
				return; 
			case PolycreatePackage.SIMPLE_CONDITION:
				sequence_SimpleCondition(context, (SimpleCondition) semanticObject); 
				return; 
			case PolycreatePackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case PolycreatePackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case PolycreatePackage.TURN_ACTION:
				sequence_TurnAction(context, (TurnAction) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns MoveAction
	 *     MoveAction returns MoveAction
	 *
	 * Constraint:
	 *     direction=DIRECTION?
	 */
	protected void sequence_MoveAction(ISerializationContext context, MoveAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RobotProgram returns RobotProgram
	 *
	 * Constraint:
	 *     (name=EString initialState=State ownedStates+=State* globalTransitions+=Transition*)
	 */
	protected void sequence_RobotProgram(ISerializationContext context, RobotProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns SimpleCondition
	 *     SimpleCondition returns SimpleCondition
	 *
	 * Constraint:
	 *     detectionType=DETECTION?
	 */
	protected void sequence_SimpleCondition(ISerializationContext context, SimpleCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (name=EString (actions+=Action actions+=Action*)? (transitions+=Transition transitions+=Transition*)?)
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     ((conditions+=Condition conditions+=Condition*)? nextState=[State|EString])
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Action returns TurnAction
	 *     TurnAction returns TurnAction
	 *
	 * Constraint:
	 *     angle=EDouble?
	 */
	protected void sequence_TurnAction(ISerializationContext context, TurnAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
