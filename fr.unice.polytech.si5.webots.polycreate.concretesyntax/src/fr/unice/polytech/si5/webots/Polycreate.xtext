// automatically generated by Xtext
grammar fr.unice.polytech.si5.webots.Polycreate with org.eclipse.xtext.common.Terminals

import "http://fr.polytech.unice/polycreate" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RobotProgram returns RobotProgram:
	{RobotProgram}
	'RobotProgram'
	name=EString
		(initialState=State)
		(ownedStates+=State)*
		(globalTransitions+=Transition)*	
	;

EString returns ecore::EString:
	STRING | ID;

Condition returns Condition:
	SimpleCondition;

Action returns Action:
	MoveAction | TurnAction;

Transition returns Transition:
	'Transition'
	'{'
		('conditions' '{' conditions+=Condition ( "," conditions+=Condition)* '}' )?
		'nextState' nextState=[State|EString]
	'}';

State returns State:
	{State}
	'State' name=EString
	'{'
		('actions' '{' actions+=Action ( "," actions+=Action)* '}' )?
		('transitions' '{' transitions+=Transition ( "," transitions+=Transition)* '}' )?
	'}';

SimpleCondition returns SimpleCondition:
	{SimpleCondition}
	'SimpleCondition'
	'{'
		('detectionType' detectionType=DETECTION)?
	'}';

enum DETECTION returns DETECTION:
				COLLISION_LEFT = 'COLLISION_LEFT' | COLLISION_RIGHT = 'COLLISION_RIGHT' | VIRTUAL_WALL = 'VIRTUAL_WALL' | CLIFF_LEFT = 'CLIFF_LEFT' | CLIFF_RIGHT = 'CLIFF_RIGHT' | CLIFF_FRONT = 'CLIFF_FRONT';

MoveAction returns MoveAction:
	{MoveAction}
	'MoveAction'
	'{'
		('duration' duration=EDouble)?
		('direction' direction=DIRECTION)?
	'}';

TurnAction returns TurnAction:
	{TurnAction}
	'TurnAction'
	'{'
		('duration' duration=EDouble)?
		('angle' angle=EDouble)?
	'}';

enum DIRECTION returns DIRECTION:
				FORWARD = 'FORWARD' | BACKWARD = 'BACKWARD';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
